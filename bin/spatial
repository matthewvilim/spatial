#!/usr/bin/env python

import glob
import re
from argparse import ArgumentParser
import os, sys, datetime
import subprocess
from os.path import dirname, abspath

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class SpatialArgumentParser(ArgumentParser):
  
  def print_help(self, file=None):
    print("""
Spatial
Usage: spatial <app> [options]

Help
  -h, --help              Prints this message
  --H, --HELP, --halp     Prints usage text for Spatial, will take a few seconds. NOTE:
                             You MUST include the app name in addition to this flag
                             (ex. `spatial <app> --help`)
      """)
    return 0
  #sys.exit(0)

def getSrcCode(app, args):
  outdir = "gen/%s" % app 
  for arg in args:
    if ("--out=" in arg):
      outdir = arg.replace("--out=","")

  src = getFullyQualifiedSourceName(app)
  
  outfile = open(os.path.join(os.getcwd(), './%s/%s.ref' % (outdir, app)), 'w+')
  found = False
  f = open( src, 'r' )
  for line in f:
    if re.match(".*%s[ ]*{" % app, line) is not None:
      found = True
    if (found):
      outfile.write(line)
    if (found and re.match("^}.*", line) is not None):
      found = False
  outfile.close()


def getFullyQualifiedSourceName(app):
  path_cmd = "grep -rEl 'class.*%s.*{|object.*%s.*{'" % (app,app)
  p = subprocess.Popen(path_cmd, stdout=subprocess.PIPE, shell=True)
  p.wait()
  paths = []
  while True:
    path = p.stdout.readline().rstrip()
    if path == b'': break
    else:
      paths.append(path)

  path = ""
  if len(paths) == 1:
    path = paths[0].decode("utf-8")
  elif len(paths) == 0:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] No source files found for " + app + ".\n")
    exit(1)
  else:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Ambiguous source files found for " + app + ".\n")
    for path in paths:
      print(path + "\n")
    exit(1)
  
  return path


def getFullyQualifiedClassName(app, errorIfNone):
  path_cmd = "find ./ -name '" + app + ".class'"
  p = subprocess.Popen(path_cmd, stdout=subprocess.PIPE, shell=True)
  p.wait()
  paths = []
  while True:
    path = p.stdout.readline().rstrip()
    if path == b'':
      break
    else:
      paths.append(path)

  path = ""
  found = False

  if len(paths) == 1:
    path = paths[0].decode("utf-8")
    found = True
  elif len(paths) == 0 and errorIfNone:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] No class found for application with name " + app + ".\n")
    exit(1)
  elif len(paths) > 1:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Ambiguous classes found for " + app + ".\n")
    for path in paths:
      print(path + "\n")
    exit(1)



  name = path.replace("/", ".")
  isTest = path.find("test-classes") > 0

  classPos = name.find("classes.")
  #print("classPos: " + str(classPos))
  if classPos >= 0:
    name = name[(classPos+8):]
  name = name[:(len(name)-6)]

  return name, isTest, found


def main():
  parser = SpatialArgumentParser()
  parser.add_argument('app', type=str, help='name of application to run')

  sbt_project = 'apps/'

  (opts, args) = parser.parse_known_args()

  ecode = os.system("sbt \"; project apps; compile\"")
  if ecode != 0: exit(1)
  ecode = os.system("sbt test:compile")
  if ecode != 0: exit(1)

  name, isTest, found = getFullyQualifiedClassName(app=opts.app, errorIfNone=True)

  java_cmd = ""
  if isTest:
    ciArgs = "export TEST_ARGS=\"--name " + opts.app + " " + ' '.join(args) + "\""
    java_cmd = ciArgs + "; sbt -Dci=true \"; testOnly " + name + "\""
  else:
    java_cmd = "sbt \"" + sbt_project + "runMain " + name + " --name " + opts.app + " " + ' '.join(args) + "\""
 
  print("")
  print("**** SBT Command: ****")
  print(java_cmd)
  print("**********************")
  print("")

  ecode = os.system(java_cmd)

  if ecode != 0:
    print("[" + bcolors.FAIL + "error" + bcolors.ENDC + "] Spatial compilation failed")
  else:
    # if not any("--withoutSrc" in s for s in args):
    #   getSrcCode(opts.app, args)
    simScript = open(opts.app + ".sim", 'w')
    simScript.write("#!/bin/bash\n\n")
    simScript.write("cd gen/" + opts.app + "\n")
    simScript.write("bash run.sh \"$@\"\n") 
    simScript.close()

    os.system("chmod u+x " + opts.app + ".sim")

if __name__ == "__main__":
    main()
